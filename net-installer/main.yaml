---
- name: Setup the netinst host
  hosts: netinst

  vars_files:
    - secrets.yaml

  vars:
    bare_hosts:
      - hostname: tenzins-pc
        macaddr: 9c-6b-00-3a-41-52

  pre_tasks:
    - name: Check for eth0 interface
      stat:
        path: /sys/class/net/eth0
      register: check_eth0

    - name: Check for eth1 interface
      stat:
        path: /sys/class/net/eth1
      register: check_eth1

    - name: Assert that both eth0 and eth1 exist
      assert:
        that:
          - check_eth0.stat.exists
          - check_eth1.stat.exists
        fail_msg: "Required network interfaces eth0 or eth1 do not exist."
        success_msg: "Both eth0 and eth1 interfaces exist."

    - name: Setup eth1
      copy:
        dest: /etc/network/interfaces.d/eth1
        content: |-
          allow-hotplug eth1
          iface eth1 inet static
            address 10.255.255.1
            netmask 255.255.255.0
            network 10.255.255.0
            broadcast 10.255.255.255
      notify: reload networking

  tasks:
    - name: Install packages
      package:
        name: '{{ item }}'
        state: present
      loop:
        - dnsmasq
        - nginx
        - tree
        - iptables
        - iptables-persistent

    - name: Set ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: true
        reload: true

    - name: Set up NAT with MASQUERADE on eth0
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: eth0
        jump: MASQUERADE

    - name: Allow forwarding from eth1 to eth0
      iptables:
        chain: FORWARD
        in_interface: eth1
        out_interface: eth0
        jump: ACCEPT

    - name: Allow established and related connections from eth0 to eth1
      iptables:
        chain: FORWARD
        in_interface: eth0
        out_interface: eth1
        match: state
        ctstate: RELATED,ESTABLISHED
        jump: ACCEPT

    - name: Save iptables rules for persistence
      shell: iptables-save > /etc/iptables/rules.v4
      changed_when: False

    - name: Send dnsmasq.conf
      copy:
        src: dnsmasq.conf
        dest: /etc/dnsmasq.conf
      notify: reload dnsmasq

    - name: Create tftpboot dir
      file:
        path: /var/lib/tftpboot
        state: directory
        owner: root
        group: root

    - name: Send autoexec.ipxe
      copy:
        src: autoexec.ipxe
        dest: /var/lib/tftpboot
        owner: dnsmasq
        group: nogroup

    - name: Get iPXE boot files
      get_url:
        url: '{{ item }}'
        dest: /var/lib/tftpboot
        owner: dnsmasq
        group: nogroup
      loop:
        - https://boot.ipxe.org/undionly.kpxe
        - https://boot.ipxe.org/ipxe.efi

    - name: Setup ipxehttp listener
      copy:
        src: ipxehttp.conf
        dest: /etc/nginx/conf.d
      notify: reload nginx
    
    - name: Remove default listener
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: reload nginx

    - name: Create ipxehttp folders
      file:
        path: '{{ item }}'
        state: directory
      loop:
        - /var/www/ipxehttp
        - /var/www/ipxehttp/ubuntu-22.04.4-live-server-amd64

    - name: Send over ubuntu-install.ipxe
      copy:
        src: ubuntu-install.ipxe
        dest: /var/www/ipxehttp

    - name: Create ipxehttp host folders
      file:
        path: /var/www/ipxehttp/{{ item.hostname }}
        state: directory
      loop: '{{ bare_hosts }}'

    - name: Send over user-data
      template:
        src: user-data.j2
        dest: /var/www/ipxehttp/{{ item.hostname }}/user-data
      loop: '{{ bare_hosts }}'

    - name: Send over meta-data
      copy:
        dest: /var/www/ipxehttp/{{ item.hostname }}/meta-data
        content: |-
          # placeholder meta-data file for {{ item.hostname }}
      loop: '{{ bare_hosts }}'

    - name: Create a symlink to hostname folder
      file:
        src: /var/www/ipxehttp/{{ item.hostname }}
        dest: /var/www/ipxehttp/{{ item.macaddr }}
        state: link
      loop: '{{ bare_hosts }}'

  handlers:
    - name: reload dnsmasq
      service:
        name: dnsmasq
        state: reloaded

    - name: reload networking
      service:
        name: networking
        state: restarted

    - name: reload nginx
      service:
        name: nginx
        state: reloaded